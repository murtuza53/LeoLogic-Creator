/**
 * @file Firebase Security Rules for LeoLogic Analytic
 *
 * @description This ruleset enforces a strict user-ownership model for all data.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles. Accessible only to the authenticated user.
 * - /users/{userId}/products/{productId}: Stores products created by the user. Enforces ownership via path.
 * - /users/{userId}/products/{productId}/specifications/{specificationId}: Stores specifications for a given product. Enforces ownership via path.
 *
 * @keySecurityDecisions
 * - User listing is disallowed.
 * - The rules enforce that the authenticated user ID must match the `userId` path parameter for all write operations.
 * - Read-only collections are not applicable in this data model.
 *
 * @denormalizationForAuthorization
 * The data model denormalizes the userId at each level in the hierarchy to ensure
 * efficient authorization. This avoids the need for expensive `get()` operations
 * to verify ownership at parent levels.
 *
 * @structuralSegregation
 * The data model utilizes private user subcollections to store user-specific data,
 * ensuring that data with different access requirements is not mixed in the same
 * collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure root access. No direct access to the root is allowed.
     * @path /
     * @allow (get, list) if false;
     * @deny (create, update, delete) all operations.
     * @principle Prevents accidental access to the root of the database.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Allows authenticated users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get) User 'A' can read their own profile: `request.auth.uid == 'A'`
     * @allow (list) if false; listing of users is not permitted
     * @allow (create) User 'A' can create their own profile: `request.auth.uid == 'A'`
     * @allow (update) User 'A' can update their own profile: `request.auth.uid == 'A'`
     * @allow (delete) User 'A' can delete their own profile: `request.auth.uid == 'A'`
     * @deny (get) User 'B' cannot read User 'A's profile: `request.auth.uid == 'B', userId == 'A'`
     * @deny (create) User 'B' cannot create User 'A's profile: `request.auth.uid == 'B', userId == 'A'`
     * @principle Enforces document ownership for reads and writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreate(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own products.
     * @path /users/{userId}/products/{productId}
     * @allow (get) User 'A' can read their own product: `request.auth.uid == 'A', userId == 'A'`
     * @allow (list) User 'A' can list their own products: `request.auth.uid == 'A', userId == 'A'`
     * @allow (create) User 'A' can create a product: `request.auth.uid == 'A', userId == 'A'`
     * @allow (update) User 'A' can update their own product: `request.auth.uid == 'A', userId == 'A'`
     * @allow (delete) User 'A' can delete their own product: `request.auth.uid == 'A', userId == 'A'`
     * @deny (get) User 'B' cannot read User 'A's product: `request.auth.uid == 'B', userId == 'A'`
     * @deny (create) User 'B' cannot create a product for User 'A': `request.auth.uid == 'B', userId == 'A'`
     * @principle Enforces document ownership for reads and writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/products/{productId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage specifications for their products.
     * @path /users/{userId}/products/{productId}/specifications/{specificationId}
     * @allow (get) User 'A' can read their own specification: `request.auth.uid == 'A', userId == 'A'`
     * @allow (list) User 'A' can list their own specifications: `request.auth.uid == 'A', userId == 'A'`
     * @allow (create) User 'A' can create a specification: `request.auth.uid == 'A', userId == 'A'`
     * @allow (update) User 'A' can update their own specification: `request.auth.uid == 'A', userId == 'A'`
     * @allow (delete) User 'A' can delete their own specification: `request.auth.uid == 'A', userId == 'A'`
     * @deny (get) User 'B' cannot read User 'A's specification: `request.auth.uid == 'B', userId == 'A'`
     * @deny (create) User 'B' cannot create a specification for User 'A': `request.auth.uid == 'B', userId == 'A'`
     * @principle Enforces document ownership for reads and writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/products/{productId}/specifications/{specificationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isSelfCreate(userId) {
        return request.auth.uid == userId;
    }
  }
}