// DO NOT EDIT, this file is generated by Firebase Studio
'use server';
import { initializeApp, getApps, getApp, App } from 'firebase/app';
import { getFirestore, doc, getDoc, setDoc, increment, DocumentData } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

let app: App;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApp();
}

const db = getFirestore(app);

const COUNTERS_COLLECTION = 'generationCounters';
const COUNTERS_DOC_ID = 'featureCounts';

export type Feature = 'product' | 'math' | 'qr' | 'ocr' | 'pdf';

export async function incrementCount(feature: Feature): Promise<void> {
  try {
    const counterRef = doc(db, COUNTERS_COLLECTION, COUNTERS_DOC_ID);
    
    const payload: DocumentData = {};
    payload[feature] = increment(1);

    await setDoc(counterRef, payload, { merge: true });

  } catch (error) {
    console.error(`Failed to increment count for ${feature}:`, error);
  }
}

export async function getFeatureCountsFromDb(): Promise<Record<Feature, number>> {
    const initialCounts: Record<Feature, number> = {
        product: 0,
        math: 0,
        qr: 0,
        ocr: 0,
        pdf: 0,
    };

    try {
        const counterRef = doc(db, COUNTERS_COLLECTION, COUNTERS_DOC_ID);
        const docSnap = await getDoc(counterRef);

        if (docSnap.exists()) {
            const data = docSnap.data();
            const counts: Record<Feature, number> = {
                product: data.product || 0,
                math: data.math || 0,
                qr: data.qr || 0,
                ocr: data.ocr || 0,
                pdf: data.pdf || 0,
            };
            return counts;
        } else {
            return initialCounts;
        }
    } catch (error) {
        console.error("Error fetching feature counts:", error);
        return initialCounts;
    }
}
